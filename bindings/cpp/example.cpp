#include "obj2buf.hpp"
#include <iostream>
#include <vector>
#include <iomanip>

int main() {
    try {
        // Example: User profile schema that matches JavaScript side
        // This matches the schema.to_json() output from JavaScript
        nlohmann::json schema_def = {
            {"type", "Schema"},
            {"root_type", {
                {"type", "MapType"},
                {"field_pairs", nlohmann::json::array({
                    nlohmann::json::array({"id", nlohmann::json{{"type", "UInt32"}}}),
                    nlohmann::json::array({"username", nlohmann::json{{"type", "VarStringType"}, {"max_length", 50}}}),
                    nlohmann::json::array({"email", nlohmann::json{{"type", "VarStringType"}, {"max_length", 100}}}),
                    nlohmann::json::array({"age", nlohmann::json{{"type", "UInt8"}}}),
                    nlohmann::json::array({"is_active", nlohmann::json{{"type", "BooleanType"}}}),
                    nlohmann::json::array({"score", nlohmann::json{{"type", "OptionalType"}, {"base_type", nlohmann::json{{"type", "Float32"}}}}})
                })}
            }}
        };
        
        // Create schema
        obj2buf::Schema schema(schema_def["root_type"]);
        
        // Example binary data generated by JavaScript obj2buf
        // Represents: {id: 12345, username: "alice", email: "alice@example.com", age: 25, is_active: true, score: 95.5}
        std::vector<uint8_t> buffer = {
            0x39, 0x30, 0x00, 0x00, 0x05, 0x61, 0x6c, 0x69, 0x63, 0x65, 0x11, 0x61, 0x6c, 0x69, 0x63, 0x65, 
            0x40, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x19, 0x01, 0x01, 0x00, 
            0x00, 0xbf, 0x42
        };
        
        // Deserialize
        nlohmann::json result = schema.deserialize(buffer);
        
        // Display results
        std::cout << "Deserialized user data:\n";
        std::cout << "  ID: " << result["id"] << "\n";
        std::cout << "  Username: " << result["username"] << "\n";
        std::cout << "  Email: " << result["email"] << "\n";
        std::cout << "  Age: " << result["age"] << "\n";
        std::cout << "  Active: " << (result["is_active"].get<bool>() ? "true" : "false") << "\n";
        
        if (!result["score"].is_null()) {
            std::cout << "  Score: " << std::fixed << std::setprecision(1) 
                     << result["score"] << "\n";
        } else {
            std::cout << "  Score: (not set)\n";
        }
        
        // You can also access individual fields with type safety
        uint32_t user_id = result["id"];
        std::string username = result["username"];
        uint32_t age = result["age"];  // Changed from uint8_t to uint32_t for JSON compatibility
        bool is_active = result["is_active"];
        
        std::cout << "\nType-safe access:\n";
        std::cout << "  User " << username << " (ID: " << user_id << ") is " 
                 << age << " years old and " 
                 << (is_active ? "active" : "inactive") << "\n";
        
    } catch (const obj2buf::parser_error& e) {
        std::cerr << "Parse error: " << e.what() << std::endl;
        return 1;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
        return 1;
    }
    
    return 0;
}
